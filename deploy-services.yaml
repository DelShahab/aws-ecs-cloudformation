AWSTemplateFormatVersion: 2010-09-09
Description: Deploy app service with Load Balancing and Auto Scaling
Parameters:
  ClusterStackName:
    Type: String
    Description: Name for the ECS Cluster stack (used to separate multiple setups)
  VPCID:
    Type: 'AWS::EC2::VPC::Id'
    Description: A VPC ID for the this service
  Subnet1ID:
    Type: 'AWS::EC2::Subnet::Id'
    Description: A Subnet 1 ID for the this service
  Subnet2ID:
    Type: 'AWS::EC2::Subnet::Id'
    Description: A Subnet 2 ID for the this service
  ServiceName:
    Type: String
    Default: nginx
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: nginx
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 8080
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  CidrIp:
    Type: String
    Default: 0.0.0.0/0
    Description: IP Cidr for Security  
    
Resources:
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: !Ref 'ServiceName'
      ExecutionRoleArn: !ImportValue ecs-stack-v1-TaskExecutionRoleArn
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-task-definition'
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Image: !Ref 'ImageUrl'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: vaadin
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
  Service:
    Type: 'AWS::ECS::Service'
    DependsOn: HttpListener
    Properties:
      Cluster: !ImportValue ecs-stack-v1-ClusterId
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      EnableECSManagedTags: true
      LaunchType: EC2
      LoadBalancers:
        - Name: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref TaskDefinition
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-service'
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub '${AWS::StackName}'
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}-alb-sg'
      GroupDescription: !Sub 'Security group for ${AWS::StackName} ALB'
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref CidrIp
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-alb-sg'
  ContainerInstanceLoadBalancerIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: !Sub 'Allow access from ${AWS::StackName} ALB'
      GroupId: !ImportValue ecs-stack-v1-SecurityGroupId
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Sub '${AWS::StackName}-lb'
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref Subnet1ID
        - !Ref Subnet2ID
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-lb'
      Type: application
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-lb-tg'
      VpcId: !Ref VPCID
  HttpListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ServiceScalableTarget:
    Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub 
        - 'service/${Cluster}/${Service.Name}'
        - Cluster: !ImportValue ecs-stack-v1-ClusterId
      RoleARN: !Sub >-
        arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: ecs
  ServiceTargetTrackingPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyName: TargetTrackingScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 80
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
Outputs:
  AppDomainName:
    Description: App Domain name  
    Value: !Join ['', ['http://', !GetAtt LoadBalancer.DNSName, '/']]
    Export:
      Name: 'AppDomainName'
